Condition for a tree to be a BST : 
1. Every node has at most 2 children - left and right child
2. Left child has to be strictly < parent node
3. Right child has to be >= parent node
4. Both left and right child themselves have to be BST.

Deletion of node from binary tree : 
Node to be deleted might have : 
	1. 0 children i.e. is a leaf node
		- directly delete it
	2. 1 child - either left or right
		- delete it and replace it by its resp child
	3. 2 non-null children i.e. both left and right child
		- grab the smallest value from the right subtree and make it the new root.

LCA in BST : 
 - For Binary search tree, while traversing the tree from top to bottom the first node which lies in between the two numbers n1 and n2 is the LCA of the nodes, i.e. the first node n with the lowest depth which lies in between n1 and n2 (n1<=n<=n2) n1 < n2. 
 - So just recursively traverse the BST in, if node’s value is greater than both n1 and n2 then our LCA lies in the left side of the node, if it’s is smaller than both n1 and n2, then LCA lies on the right side. 
 - Otherwise, the root is LCA (assuming that both n1 and n2 are present in BST).

 Algorithm:  

1. Create a recursive function that takes a node and the two values n1 and n2.
2. If the value of the current node is less than both n1 and n2, then LCA lies in the right subtree. Call the recursive function for the right subtree.
3. If the value of the current node is greater than both n1 and n2, then LCA lies in the left subtree. Call the recursive function for the left subtree.
4. If both the above cases are false then return the current node as LCA.